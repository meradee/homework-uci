{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Observations and Insights "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "      <td>38.825898</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>10</td>\n",
       "      <td>35.014271</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>15</td>\n",
       "      <td>34.223992</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>20</td>\n",
       "      <td>32.997729</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Mouse ID Drug Regimen   Sex  Age_months  Weight (g)  Timepoint  \\\n",
       "0     k403     Ramicane  Male          21          16          0   \n",
       "1     k403     Ramicane  Male          21          16          5   \n",
       "2     k403     Ramicane  Male          21          16         10   \n",
       "3     k403     Ramicane  Male          21          16         15   \n",
       "4     k403     Ramicane  Male          21          16         20   \n",
       "\n",
       "   Tumor Volume (mm3)  Metastatic Sites  \n",
       "0           45.000000                 0  \n",
       "1           38.825898                 0  \n",
       "2           35.014271                 1  \n",
       "3           34.223992                 1  \n",
       "4           32.997729                 1  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dependencies and Setup\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import scipy.stats as sem\n",
    "import numpy as np\n",
    "\n",
    "# Study data files\n",
    "mouse_metadata_path = \"data/Mouse_metadata.csv\"\n",
    "study_results_path = \"data/Study_results.csv\"\n",
    "\n",
    "# Read the mouse data and the study results\n",
    "mouse_metadata = pd.read_csv(mouse_metadata_path)\n",
    "study_results = pd.read_csv(study_results_path)\n",
    "\n",
    "# Combine the data into a single dataset\n",
    "combined_data = pd.merge(mouse_metadata, study_results, how=\"outer\", on=\"Mouse ID\")\n",
    "\n",
    "# Display head preview\n",
    "combined_data.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of Unique Mice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>249</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Number of Unique Mice\n",
       "0                    249"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the number of mice in the DataFrame.\n",
    "number_of_mice = combined_data[['Mouse ID']]\n",
    "# Getting the duplicate mice by ID number that shows up for Mouse ID and Timepoint.\n",
    "# Optional: Get all the data for the duplicate mouse ID. \n",
    "mice_df = number_of_mice.drop_duplicates(keep='first')\n",
    "\n",
    "mice_count = mice_df['Mouse ID'].count()\n",
    "# Create a clean DataFrame by dropping the duplicate mouse by its ID.\n",
    "# Checking the number of mice in the clean DataFrame.\n",
    "total_mice_df = pd.DataFrame({'Number of Unique Mice':[mice_count]})\n",
    "total_mice_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary Statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate a summary statistics table of mean, median, variance, standard deviation, and SEM of the tumor volume for each regimen\n",
    "regimen_grouped = combined_data.groupby(['Drug Regimen'])\n",
    "regimen_grouped\n",
    "\n",
    "regimen_mean = regimen_grouped['Tumor Volume (mm3)'].mean()\n",
    "regimen_median = regimen_grouped['Tumor Volume (mm3)'].median()\n",
    "regimen_variance = regimen_grouped['Tumor Volume (mm3)'].var()\n",
    "regimen_std = regimen_grouped['Tumor Volume (mm3)'].std()\n",
    "regimen_sem = regimen_grouped['Tumor Volume (mm3)'].sem()\n",
    "\n",
    "# This method is the most straighforward, creating multiple series and putting them all together at the end."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mean</th>\n",
       "      <th>Median</th>\n",
       "      <th>Variance</th>\n",
       "      <th>Standard Deviation</th>\n",
       "      <th>SEM</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Capomulin</td>\n",
       "      <td>40.675741</td>\n",
       "      <td>41.557809</td>\n",
       "      <td>24.947764</td>\n",
       "      <td>4.994774</td>\n",
       "      <td>0.329346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Ceftamin</td>\n",
       "      <td>52.591172</td>\n",
       "      <td>51.776157</td>\n",
       "      <td>39.290177</td>\n",
       "      <td>6.268188</td>\n",
       "      <td>0.469821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Infubinol</td>\n",
       "      <td>52.884795</td>\n",
       "      <td>51.820584</td>\n",
       "      <td>43.128684</td>\n",
       "      <td>6.567243</td>\n",
       "      <td>0.492236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Ketapril</td>\n",
       "      <td>55.235638</td>\n",
       "      <td>53.698743</td>\n",
       "      <td>68.553577</td>\n",
       "      <td>8.279709</td>\n",
       "      <td>0.603860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Naftisol</td>\n",
       "      <td>54.331565</td>\n",
       "      <td>52.509285</td>\n",
       "      <td>66.173479</td>\n",
       "      <td>8.134708</td>\n",
       "      <td>0.596466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Placebo</td>\n",
       "      <td>54.033581</td>\n",
       "      <td>52.288934</td>\n",
       "      <td>61.168083</td>\n",
       "      <td>7.821003</td>\n",
       "      <td>0.581331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Propriva</td>\n",
       "      <td>52.322552</td>\n",
       "      <td>50.854632</td>\n",
       "      <td>42.351070</td>\n",
       "      <td>6.507770</td>\n",
       "      <td>0.512884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Ramicane</td>\n",
       "      <td>40.216745</td>\n",
       "      <td>40.673236</td>\n",
       "      <td>23.486704</td>\n",
       "      <td>4.846308</td>\n",
       "      <td>0.320955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Stelasyn</td>\n",
       "      <td>54.233149</td>\n",
       "      <td>52.431737</td>\n",
       "      <td>59.450562</td>\n",
       "      <td>7.710419</td>\n",
       "      <td>0.573111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Zoniferol</td>\n",
       "      <td>53.236507</td>\n",
       "      <td>51.818479</td>\n",
       "      <td>48.533355</td>\n",
       "      <td>6.966589</td>\n",
       "      <td>0.516398</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Mean     Median   Variance  Standard Deviation       SEM\n",
       "Drug Regimen                                                               \n",
       "Capomulin     40.675741  41.557809  24.947764            4.994774  0.329346\n",
       "Ceftamin      52.591172  51.776157  39.290177            6.268188  0.469821\n",
       "Infubinol     52.884795  51.820584  43.128684            6.567243  0.492236\n",
       "Ketapril      55.235638  53.698743  68.553577            8.279709  0.603860\n",
       "Naftisol      54.331565  52.509285  66.173479            8.134708  0.596466\n",
       "Placebo       54.033581  52.288934  61.168083            7.821003  0.581331\n",
       "Propriva      52.322552  50.854632  42.351070            6.507770  0.512884\n",
       "Ramicane      40.216745  40.673236  23.486704            4.846308  0.320955\n",
       "Stelasyn      54.233149  52.431737  59.450562            7.710419  0.573111\n",
       "Zoniferol     53.236507  51.818479  48.533355            6.966589  0.516398"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate a summary statistics table of mean, median, variance, standard deviation, and SEM of the tumor volume for each regimen\n",
    "summary_statistics = pd.DataFrame({'Mean': regimen_mean, \n",
    "                                   'Median': regimen_median, \n",
    "                                   'Variance': regimen_variance, \n",
    "                                   'Standard Deviation': regimen_std, \n",
    "                                   'SEM': regimen_sem})\n",
    "summary_statistics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bar Plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a bar plot showing the number of mice per time point for each treatment throughout the course of the study using pandas.\n",
    "mouse_time = combined_data.groupby('Drug Regimen').count()['Tumor Volume (mm3)']\n",
    "mouse_time_df = pd.DataFrame(mouse_time)\n",
    "\n",
    "mouse_time_df.plot.bar(legend=False, rot=40)\n",
    "plt.ylabel('Number of Data Points')\n",
    "plt.title('Data Points Per Drug Treatment Regimen')\n",
    "mouse_time_df\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a bar plot showing the number of mice per time point for each treatment throughout the course of the study using pyplot.\n",
    "x_axis = np.arange(len(mouse_time))\n",
    "tick_locations = [x for x in x_axis]\n",
    "plt.figure(figsize=(6,4))\n",
    "\n",
    "reset_mouse_time_df = mouse_time_df.reset_index()\n",
    "\n",
    "plt.bar(x_axis, mouse_time_df['Tumor Volume (mm3)'])\n",
    "plt.xticks(tick_locations, reset_mouse_time_df['Drug Regimen'], rotation=\"40\")\n",
    "\n",
    "plt.title('Data Points Per Drug Treatment Regimen')\n",
    "plt.xlabel('Drug Regimen')\n",
    "plt.ylabel('Number of Data Points')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pie Plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Female</td>\n",
       "      <td>124</td>\n",
       "      <td>124</td>\n",
       "      <td>124</td>\n",
       "      <td>124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Male</td>\n",
       "      <td>125</td>\n",
       "      <td>125</td>\n",
       "      <td>125</td>\n",
       "      <td>125</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Mouse ID  Drug Regimen  Age_months  Weight (g)\n",
       "Sex                                                   \n",
       "Female       124           124         124         124\n",
       "Male         125           125         125         125"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gender_data = mouse_metadata.groupby('Sex').count()\n",
    "gender_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Female', 'Male']"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labels = [mouse_metadata['Sex'].unique()]\n",
    "newlist = list(gender_data.index)\n",
    "newlist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Sex\n",
       "Female    124\n",
       "Male      125\n",
       "Name: Mouse ID, dtype: int64"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gender_size = gender_data['Mouse ID']\n",
    "gender_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a pie plot showing the distribution of female versus male mice using pandas\n",
    "colors = ['orange', '#5F9EA0']\n",
    "explode = (0.1, 0)\n",
    "plt.pie(gender_size, \n",
    "        labels=newlist, \n",
    "        colors=colors, \n",
    "        autopct=\"%1.1f%%\", \n",
    "        shadow=True, \n",
    "        startangle=180, \n",
    "        explode=explode)\n",
    "plt.title('Male vs Female Mouse Population')\n",
    "plt.ylabel('Gender', rotation=360)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 288x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a pie plot showing the distribution of female versus male mice using pyplot\n",
    "secondpie = gender_data[\"Mouse ID\"].plot.pie(y='gender_size', \n",
    "                                             colors=colors, \n",
    "                                             figsize=(4, 5), \n",
    "                                             autopct=\"%1.1f%%\",\n",
    "                                             startangle=180,\n",
    "                                             shadow=True,\n",
    "                                             explode=explode)\n",
    "plt.title('Male vs Female Mouse Population')\n",
    "plt.ylabel('Gender', rotation=360)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quartiles, Outliers and Boxplots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the final tumor volume of each mouse across four of the most promising treatment regimens. Calculate the IQR and quantitatively determine if there are any potential outliers. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate a box plot of the final tumor volume of each mouse across four regimens of interest"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Line and Scatter Plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate a line plot of time point versus tumor volume for a mouse treated with Capomulin\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate a scatter plot of mouse weight versus average tumor volume for the Capomulin regimen\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Correlation and Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the correlation coefficient and linear regression model \n",
    "# for mouse weight and average tumor volume for the Capomulin regimen\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
